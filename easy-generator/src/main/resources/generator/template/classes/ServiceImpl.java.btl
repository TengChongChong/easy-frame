package ${config.serviceImplPackage};

<% for(import in serviceImpl.imports!){ %>
import ${import};
<% } %>

/**
 * ${config.businessName}
 *
 * @author ${config.author}
 * @date ${config.date}
 */
@Service
public class ${config.modelName}ServiceImpl extends ServiceImpl<${config.modelName}Mapper, ${config.modelName}> implements ${config.modelName}Service {

    <% if(config.genSelect){ %>
    /**
     * 列表
     * @param object 查询条件
     * @return 数据集合
     */
    @Override
    public Page select(${config.modelName} object) {
        QueryWrapper<${config.modelName}> queryWrapper = new QueryWrapper<>();
        if(object != null){
            // 查询条件
            <% for(propertyName in config.searchOrder){ %>
            ${GeneratorJavaUtil.generator(propertyName, config.fieldSets, 3)}
            <% } %>
        }
        Page page = ToolUtil.getPage(object);
        page.setRecords(getBaseMapper().select(page, queryWrapper));
        return page;
    }

    /**
     * 详情
     *
     * @param id id
     * @return 详细信息
     */
    @Override
    public ${config.modelName} input(String id) {
        ToolUtil.checkParams(id);
        return getById(id);
    }
    <% } %>
    <% if(config.genAdd){ %>

    /**
     * 新增
     *
     * @return 默认值
     */
    @Override
    public ${config.modelName} add() {
        ${config.modelName} object = new ${config.modelName}();
        // 设置默认值
        return object;
    }
    <% } %>
    <% if(config.genDelete){ %>

    /**
     * 删除
     *
     * @param ids 数据ids
     * @return 是否成功
     */
    @Transactional(rollbackFor = RuntimeException.class)
    @Override
    public boolean delete(String ids) {
        ToolUtil.checkParams(ids);
        List<String> idList = Arrays.asList(ids.split(","));
        return removeByIds(idList);
    }
    <% } %>
    <% if(config.genSave){ %>

    /**
     * 保存
     *
     * @param object 表单内容
     * @return 保存后信息
     */
    @Transactional(rollbackFor = RuntimeException.class)
    @Override
    public ${config.modelName} saveData(${config.modelName} object) {
        ToolUtil.checkParams(object);
        if (StrUtil.isNotBlank(object.getId())) {
            // 新增,设置默认值
        }
        return (${config.modelName}) ToolUtil.checkResult(saveOrUpdate(object), object);
    }
    <% } %>
}